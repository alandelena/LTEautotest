#!/usr/bin/python
#+-----------------------------------------------------------------------------------------------------------------------+
#| setN6075B.py: This file pretends to call a XML file passing as parameter and run                                      |
#|               all the SCPI commands inside the file on the N6075B.                                                    |
#|                                                                                                                       |
#| Author: Bruno Villas Boas                                                                                             |
#| Usage: setN6075B.py -i <xml_file> [-o <equipment_name>]                                                               |
#| example: python setN6075B.py -i xmlCommands\psuFiles\eBSP_PSU_On_Default.xml -o TCPIP0::A-N6705B-01480::inst0::INSTR  |
#+-----------------------------------------------------------------------------------------------------------------------+
from xml.dom.minidom import parse
import sys, getopt, visa, time, xml.dom.minidom
sys.path.insert(0, '/supportFiles')
from prettytable import PrettyTable

def main(argv):
    version = 0.1
    #####################################################################
    ### Get argument file ###############################################
    #####################################################################
    try:
        myopts, args = getopt.getopt(argv,"i:")
    except getopt.GetoptError as e:
        print (str(e))
        print("Usage: %s -i input_file [-e equipment_name]" % sys.argv[0])

    for o, a in myopts:
        if o == '-i':
            ifile=a
        elif o == '-e':
            equipment=a

    if 'ifile' not in locals():
        print("Usage: %s -i input_file [-e equipment_name]" % sys.argv[0])

    # Header
    print "\n"
    printList = PrettyTable(["N6705B configuration"])
    printList.padding_width = 1 # One space between column edges and contents (default)
	
    printList.add_row(["Version %2f" % version])
    #####################################################################
    ### Import XML File #################################################
    #####################################################################

    # Load argument xml file
    printList.add_row(["Loading %s" % ifile])
    DOMTree = xml.dom.minidom.parse(ifile)
    commands = DOMTree.documentElement
    if commands.hasAttribute("state"):
        printList.add_row(["Setting N6705B to %s" % commands.getAttribute("network")])
    else:
        print printList
        print "The configuration file doesn't have the 'network' configuration attribute."
        sys.exit(2)

    #####################################################################
    ### Instrument Handle ###############################################
    #####################################################################
    # instrument connection
    rm = visa.ResourceManager('@py')
    if 'equipment' not in locals():
        equipment = "TCPIP0::172.17.70.237::inst0::INSTR"

    printList.add_row(["Equipment used: %s" % equipment])
    print printList
    # connect to the equipment
    i = 1
    while i < 6:
        try:
            print("  Trying to reach the equipment - #%i" % i)
            n6705b = rm.open_resource(equipment)
            # set CMW500 timeout to 5 seconds
            n6705b.timeout = 5000
            queryReturn = n6705b.query('SYSTem:ERRor?')
            break
        except:
            #print("\tCannot reach the equipment %s" % equipment)
            i+=1
            if i > 5:
                print("\n\t------- Check the communication with your equipment -------")
                sys.exit(2)

    print "\t* Connected to the equipment --- OK\n"

    errorList = [] # Declares an empty list for errors
    print "\t* Equipment Buffer Clean --- OK\n"

    print "------------------------------------------------------"
    print "-----------      Configuring Network       -----------"
    print "------------------------------------------------------"

if __name__ == "__main__":
   main(sys.argv[1:])
